name: Check GCP action
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

permissions:
  id-token: write

jobs:
  read-flag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - id: auth
        name: Authenticate to GCP (Workload Identity Federation)
        uses: google-github-actions/auth@v2.1.3
        with:
          # FULL provider resource name (must include numeric project number)
          workload_identity_provider: "projects/48994678794/locations/global/workloadIdentityPools/iam-lab-7-gh-pool/providers/iam-lab-7-gh-pool-oidc-provider"
          service_account: "iam-lab-7-target@gcp-labs-9necgia2.iam.gserviceaccount.com"
          create_credentials_file: true
          export_environment_variables: true
          access_token_scopes: "https://www.googleapis.com/auth/cloud-platform"
          cleanup_credentials: true

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: "latest"
          project_id: gcp-labs-9necgia2

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Debug â€” show credentials file summary (temporary; remove after debugging)
        # WARNING: this prints info about the credentials file to the logs.
        run: |
          set -euo pipefail
          CREDS="${{ steps.auth.outputs.credentials_file_path }}"
          echo "CREDS path: $CREDS"
          echo "---- JSON type (should be 'external_account' for federation) ----"
          jq -r '.type // "no-type-field"' "$CREDS" || true
          echo "---- head (first 40 lines) of credentials file (for debugging) ----"
          head -n 40 "$CREDS" || true

      - name: Use ADC to mint token & read secret
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          PROJECT_ID: gcp-labs-9necgia2
          SECRET_NAME: flag_iam_lab_7
        run: |
          set -euo pipefail

          echo "Using ADC file: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "Attempting to mint an access token via ADC (application-default)..."

          # Mint an access token from the ADC (works with external_account JSON)
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token 2>/tmp/gcloud_adc_err || true)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "ERROR: Failed to obtain ADC access token. Dumping gcloud error output:"
            cat /tmp/gcloud_adc_err || true
            exit 1
          fi

          echo "Got token (length: ${#ACCESS_TOKEN}). Calling Secret Manager REST API..."

          RESPONSE=$(curl -s -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "https://secretmanager.googleapis.com/v1/projects/${PROJECT_ID}/secrets/${SECRET_NAME}/versions/latest:access")

          echo "Secret Manager raw response:"
          echo "$RESPONSE" | jq .

          # Extract and decode the base64 payload.data
          SECRET_BASE64=$(echo "$RESPONSE" | jq -r '.payload.data // empty')
          if [ -z "$SECRET_BASE64" ]; then
            echo "No payload.data returned. This may indicate a permission issue, wrong secret name, or secret missing."
            exit 2
          fi

          echo "Decoded secret (flag):"
          echo "$SECRET_BASE64" | base64 --decode || (echo "base64 decode failed" && exit 3)

      - name: Cleanup note (remove debug step after success)
        if: always()
        run: |
          echo "If successful, remove the Debug step to avoid leaking credential structure in logs."
